name: build

on:
  push:
    branches: master
  schedule:
    - cron: "30 9 * * 2,5"
  workflow_dispatch:
    inputs:
        src_ref:
          description: "The branch/tag for which the dispatch is sent from dreambbs project"
          required: true
          default: "refs/heads/master"
        src_sha:
          description: "The commit SHA for which the dispatch is sent from dreambbs project"
          required: true
          default: ""

env:
    SRC_SHA: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.src_sha || '' }}
    SRC_REF: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.src_ref || format('refs/heads/{0}', 'master') }}

jobs:
  main:
    if: "!contains(github.event.head_commit.message, 'skip-ci')"
    runs-on: ubuntu-20.04
    outputs:
      SRC_BRANCH: ${{ steps.src_info.outputs.SRC_BRANCH }}
      SRC_SHA_LATEST: ${{ steps.src_info.outputs.SRC_SHA_LATEST }}
      SRC_SHA: ${{ steps.src_info.outputs.SRC_SHA }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Getting Commit Information from DreamBBS
        id: src_info
        run: |
          SRC_REF_INFO="$(curl \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ccns/dreambbs/branches/$SRC_REF")"
          SRC_BRANCH="$(jq -r '.name' <<< "$SRC_REF_INFO")"
          SRC_SHA_LATEST="$(jq -r '.commit.sha' <<< "$SRC_REF_INFO")"
          if [ -z "$SRC_SHA" ]; then
            SRC_SHA="$SRC_SHA_LATEST"
          fi
          echo "SRC_BRANCH=$SRC_BRANCH" >> $GITHUB_ENV
          echo "SRC_SHA_LATEST=$SRC_SHA_LATEST" >> $GITHUB_ENV
          echo "SRC_SHA=$SRC_SHA" >> $GITHUB_ENV
          echo "::set-output name=SRC_BRANCH::$SRC_BRANCH"
          echo "::set-output name=SRC_SHA_LATEST::$SRC_SHA_LATEST"
          echo "::set-output name=SRC_SHA::$SRC_SHA"
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: |
            "SRC_BRANCH=${{ env.SRC_BRANCH }}"
            "SRC_SHA=${{ env.SRC_SHA }}"
            "SRC_REF=${{ env.SRC_REF }}"
          tags: |
            ${{ env.SRC_BRANCH != 'master' && format('{0}/imagedreambbs:{1}', secrets.DOCKERHUB_REPO_OWNER, env.SRC_BRANCH) || '' }}
            ${{ secrets.DOCKERHUB_REPO_OWNER }}/imagedreambbs:${{ env.TAG_PREFIX }}latest
            ${{ secrets.DOCKERHUB_REPO_OWNER }}/imagedreambbs:${{ env.TAG_PREFIX }}${{ steps.date.outputs.date }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        env:
          TAG_PREFIX: ${{ env.SRC_BRANCH != 'master' && format('{0}-', env.SRC_BRANCH) || '' }}
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  code_scan:
    needs: main
    runs-on: ubuntu-20.04
    container:
      image: >-
        ${{ (github.repository_owner == 'bbsdocker' && 'bbsdocker')
          || (github.repository_owner == 'IepIweidieng' && 'iepiweidieng')
          || github.repository_owner
          }}/imagedreambbs:${{
          needs.main.outputs.SRC_BRANCH != 'master' && needs.main.outputs.SRC_BRANCH || 'latest' }}
      ports: [8888]
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
        fail-fast: false
        matrix:
          language: [ 'cpp' ]
    env:
      SARIF_FILE_PATH: '../results'
      SARIF_ZIPPED_FILE: '../results.sarif.base64'
    steps:
      -
        name: Install jq
        run: |
          yum install jq -y
          echo "installed jq version: $(jq --version)"
      -
        name: Load Compiling Environment
        run: |
          env -i /bin/bash -c '
            unset PWD SHLVL _
            source <(sudo -u bbs /bin/sh -c "source /tmp/env.compile; envsubst < /tmp/env.compile")
            env' >> $GITHUB_ENV
      # Initializes the CodeQL tools for scanning.
      -
        name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
      -
        name: Build Project
        working-directory: ${{ env.BBSHOME }}/src/build
        run: |
          make
      -
        name: Run Tests
        continue-on-error: true
        working-directory: ${{ env.BBSHOME }}/src/build
        run:
          make test
      -
        name: Move Repository Directory for Analysis
        run: |
          mv -t "$GITHUB_WORKSPACE" "$BBSHOME"/src/* "$BBSHOME"/src/.[!.]*
          ls
      -
        name: Perform CodeQL Analysis
        id: codeql_analysis
        uses: github/codeql-action/analyze@v1
        with:
          output: ${{ env.SARIF_FILE_PATH }}
          upload: false
      -
        name: Merge CodeQL Analysis Results into a File
        run: |
            jq -s -jc '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": (reduce .[].version as $item (null; . // $item)),
              "runs": [.[].runs[]]
            }' "$SARIF_FILE_PATH"/* \
            | gzip -c - | base64 -w0 > "$SARIF_ZIPPED_FILE"
      -
        name: Upload CodeQL Analysis Results
        run: |
          curl \
            -X POST \
            -u "${{ secrets.PAT_USERNAME }}:${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ccns/dreambbs/code-scanning/sarifs \
            -d "$(jq -n -jc '{
              "commit_sha": $SRC_SHA,
              "ref": $SRC_REF,
              "sarif": $sarif
            }' \
              --arg SRC_SHA "$SRC_SHA" \
              --arg SRC_REF "$SRC_REF" \
              --arg sarif "$(cat "$SARIF_ZIPPED_FILE")"
            )"
          # `$ENV` is support only from jq-1.6.
          # However, only jq-1.5 is currently available in the EPEL Repository for CentoOS 8 Stream.
        env:
          SRC_SHA: ${{ needs.main.outputs.SRC_SHA }}
          SRC_REF: ${{ env.SRC_REF }}
  conclusion:
    if: always()
    needs: [main, code_scan]
    runs-on: ubuntu-20.04
    env:
      status_job_name: >-
        ${{ (needs.main.result != 'success' && 'main')
          || (needs.code_scan.result != 'success' && 'code_scan')
          || 'conclusion' }}
    steps:
      -
        name: Get workflow running status
        run: |
          echo "status=$status" >> $GITHUB_ENV
        env:
          status: ${{ env.status_job_name == 'conclusion' && job.status || needs[env.status_job_name].result }}
      -
        name: Forward build result for status badge
        if: ${{ env.status != 'cancelled' && needs.main.outputs.SRC_SHA == needs.main.outputs.SRC_SHA_LATEST }}
        run: |
          curl \
            -X POST \
            -u "${{ secrets.PAT_USERNAME}}:${{secrets.PAT_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/dispatches \
            -d "$(jq -n -jc '{
              "ref": "refs/heads/master",
              "inputs": {"build_result": $ENV.RESULT}
            }')"
        env:
          REPO: ${{ github.repository }}
          WORKFLOW_ID: ${{ format('push_container_{0}.yml', needs.main.outputs.SRC_BRANCH) }}
          RESULT: ${{ env.status }}
      -
        name : Add Notification in bbs-dev in CCNS Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ env.status }}
          title: ${{ github.workflow }} (${{ needs.main.outputs.SRC_BRANCH }})
          description: |
            ${{ env.status != 'success' && format('{0} at job: {1}.', env.status, env.status_job_name) || '' }}
        env:
          status_job_name: ${{ job.status != 'success' && 'conclusion' || env.status_job_name }}
          status: ${{ job.status != 'success' && job.status || env.status }}
